import { useEffect, useRef } from 'react';
import { buscarPrefijoMasPreciso } from './telefonoUtils';

/**
 * Sincroniza el n√∫mero telef√≥nico con el valor del backend,
 * pero sin sobrescribir los cambios recientes del usuario ni mientras el input est√© activo.
 */
export function useTelefonoSync({
  value,
  paisSeleccionado,
  prefijosTelefonicos,
  setDisplayValue,
  setBandera,
  handleSelectPais,
  inputRef, // üëà aseg√∫rate de pasar esto desde TelefonoField
}) {
  const bloqueadoPorUsuario = useRef(false);
  const valorPrevio = useRef(value);

  // üõ°Ô∏è Bloquea sincronizaci√≥n justo despu√©s de selecci√≥n manual del pa√≠s
  useEffect(() => {
    if (paisSeleccionado?.codigo) {
      bloqueadoPorUsuario.current = true;
      console.log('‚úã [Sync] Bloqueo temporal tras selecci√≥n manual');
      const timer = setTimeout(() => {
        bloqueadoPorUsuario.current = false;
        console.log('‚úÖ [Sync] Bloqueo liberado');
      }, 400);
      return () => clearTimeout(timer);
    }
  }, [paisSeleccionado?.codigo]);

  // üîÑ Sincroniza visualmente cuando cambia el valor del backend
  useEffect(() => {
    if (value === valorPrevio.current) return;
    valorPrevio.current = value;

    if (bloqueadoPorUsuario.current) {
      console.log('‚úã [Sync] Ignorado ‚Äî selecci√≥n manual reciente');
      return;
    }

    console.groupCollapsed('%cüì¶ [Sync desde backend]', 'color:#2196f3;');
    console.log('üî∏ Valor recibido desde backend:', value);
    console.log(
      'üåç Pa√≠s actual:',
      paisSeleccionado?.pais,
      paisSeleccionado?.codigo
    );

    // üëá Verificar si el usuario tiene el input enfocado
    const el = inputRef?.current;
    const isFocused = el && el === document.activeElement;
    if (isFocused) {
      console.log('‚úã Usuario escribiendo, no se actualiza visual.');
      console.groupEnd();
      return;
    }

    const detectado = buscarPrefijoMasPreciso(value, prefijosTelefonicos);
    if (!detectado) {
      console.warn('‚ùì Prefijo no reconocido desde backend');
      console.groupEnd();
      setDisplayValue(value || '');
      return;
    }

    // Si el prefijo del backend es distinto al actual, actualizamos pa√≠s
    if (detectado.codigo !== paisSeleccionado?.codigo) {
      console.warn(
        `‚ö†Ô∏è Prefijo backend distinto (${detectado.codigo}) ‚Üí actualizando pa√≠s.`
      );
      handleSelectPais(detectado);
      setBandera(detectado.bandera);
    }

    // Asegurar formato visual coherente
    const limpio = String(value).replace(/\s+/g, '');
    const numeroLocal = limpio.replace(detectado.codigo, '').replace(/\D/g, '');
    const nuevoDisplay = numeroLocal
      ? `${detectado.codigo} ${numeroLocal}`
      : detectado.codigo;

    console.log('‚úÖ Actualizando displayValue ‚Üí', nuevoDisplay);
    console.groupEnd();
    setDisplayValue(nuevoDisplay);
  }, [
    value,
    paisSeleccionado,
    prefijosTelefonicos,
    setDisplayValue,
    setBandera,
    handleSelectPais,
    inputRef,
  ]);
}
